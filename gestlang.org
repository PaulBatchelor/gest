#+TITLE: Gestlang
* Overview
This implements a very small DSL for notating gestures
in Gest.

For example:

#+BEGIN_SRC text
beg 3 3
mr 2 t 0 lin
pr 4
t 7 sg
t 4 sg
t 2 sg
t -1 sg
end
loop fin
#+END_SRC

The parser is quite small and limited, but it should save
a few keystrokes.
* Tangled Files
=gestlang.c= and =gestlang.h=.

#+NAME: gestlang.h
#+BEGIN_SRC c :tangle gestlang.h
#ifndef GESTLANG_H
#define GESTLANG_H
<<typedefs>>

#ifdef GESTLANG_PRIV
<<structs>>
#endif

<<funcdefs>>
#endif
#+END_SRC

#+NAME: gestlang.c
#+BEGIN_SRC c :tangle gestlang.c
#include <stdlib.h>
#include <string.h>
#include <stdio.h>
#include "gest.h"
#define GESTLANG_PRIV
#include "gestlang.h"
<<static_funcdefs>>
<<funcs>>
#+END_SRC
* State
#+NAME: typedefs
#+BEGIN_SRC c
typedef struct gestlang_d gestlang_d;
#+END_SRC

#+NAME: structs
#+BEGIN_SRC c
struct gestlang_d {
    char word[64];
    char pool[256];
    char *args[8];
    int argpos;
    int psz;
    int nargs;
    int wsz;
    int (*fun)(gest_d *,int,char **,void*);
    void *ud;
    int err;
    <<gest_dict>>
    <<comments>>
};
#+END_SRC

#+NAME: funcdefs
#+BEGIN_SRC c
size_t gestlang_sizeof(void);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
size_t gestlang_sizeof(void)
{
    return sizeof(gestlang_d);
}
#+END_SRC
* Initialization/Cleanup
Initialize with =gestlang_init=.

#+NAME: funcdefs
#+BEGIN_SRC c
void gestlang_init(gestlang_d *glang);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
void gestlang_init(gestlang_d *glang)
{
    <<init>>
}
#+END_SRC

#+NAME: init
#+BEGIN_SRC c
{
    int i;
    glang->ud = NULL;
    glang->err = 0;
    glang->wsz = 0;
    glang->nargs = 0;
    glang->psz = 0;
    glang->argpos = -1;

    for (i = 0; i < 64; i++) {
        glang->word[i] = 0;
    }

    for (i = 0; i < 256; i++) {
        glang->pool[i] = 0;
    }

    for (i = 0; i < 8; i++) {
        glang->args[i] = NULL;
    }
}
#+END_SRC

#+NAME: funcdefs
#+BEGIN_SRC c
void gestlang_bye(gestlang_d *glang);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
void gestlang_bye(gestlang_d *glang)
{
    <<cleanup>>
}
#+END_SRC
* Parse
=gestlang_parse= will parse a string of text, and assumes
the string is complete.

=gestlang_parse_buffer= will parse a buffer of text, and
is designed to be used for streaming.

#+NAME: funcdefs
#+BEGIN_SRC c
int gestlang_parse(gestlang_d *glang,
                   gest_d *gest,
                   const char *buf,
                   int sz);

int gestlang_parse_buffer(gestlang_d *glang,
                          gest_d *gest,
                          const char *buf,
                          int sz);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
int gestlang_parse(gestlang_d *glang,
                   gest_d *gest,
                   const char *buf,
                   int sz)
{
    gestlang_parse_buffer(glang, gest, buf, sz);
    if (glang->wsz > 0) {
        glang->word[glang->wsz] = '\0';
        parse_word(glang, gest);
        glang->wsz = 0;
    }
    return 0;
}
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
int gestlang_parse_buffer(gestlang_d *glang,
                          gest_d *gest,
                          const char *buf,
                          int sz)
{
    <<tokenize>>
    return 0;
}
#+END_SRC
** Stage 1: tokenize
#+NAME: tokenize
#+BEGIN_SRC c
int i;

for (i = 0; i < sz; i++) {
    if (glang->err) return glang->err;
    <<handle_comments>>
    if (glang->wsz >= 64) {
        glang->word[63] = '\0';
        parse_word(glang, gest);
        glang->wsz = 0;
    } else if (buf[i] == ' ' || buf[i] == '\n') {
        glang->word[glang->wsz] = '\0';
        parse_word(glang, gest);
        glang->wsz = 0;
    } else {
        glang->word[glang->wsz] = buf[i];
        glang->wsz++;
    }

}
#+END_SRC
** Stage 2: parse words
#+NAME: static_funcdefs
#+BEGIN_SRC c
static void parse_word(gestlang_d *glang, gest_d *gest);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
<<word_lookup>>
static void parse_word(gestlang_d *glang, gest_d *gest)
{
    if (glang->wsz <= 0) return;
    if (glang->argpos < 0) {
        glang->argpos = 0;

        if (find_word(glang)) {
            fprintf(stderr, "could not find function %s\n", glang->word);
            glang->err = 2;
            return;
        }

        if (glang->nargs == 0) {
            glang->fun(gest, glang->nargs, glang->args, glang->ud);
            glang->psz = 0;
            glang->argpos = -1;
        }
    } else {
        int c;

        for (c = 0; c < glang->wsz; c++) {
            if (glang->psz >= 256) {
                glang->psz = 0;
                glang->err = 1;
                return;
            }
            glang->pool[glang->psz + c] = glang->word[c];
        }
        glang->args[glang->argpos] = &glang->pool[glang->psz];
        glang->psz += glang->wsz;
        glang->pool[glang->psz] = '\0';
        glang->psz++;

        glang->argpos++;

        if (glang->argpos == glang->nargs) {
            glang->fun(gest, glang->nargs, glang->args, glang->ud);
            glang->psz = 0;
            glang->argpos = -1;
        }
    }
}
#+END_SRC

#+NAME: word_lookup
#+BEGIN_SRC c
static int find_word(gestlang_d *glang)
{
    int rc;
    gestlang_entry *ent;

    rc = gestlang_find(glang, glang->word, glang->wsz, &ent);

    if (rc) return rc;

    glang->fun = ent->fun;
    glang->nargs = ent->nargs;
    glang->ud = ent->ud;

    return 0;
}
#+END_SRC
** Loading a file
#+NAME: funcdefs
#+BEGIN_SRC c
int gestlang_load(gestlang_d *glang,
                  gest_d *gest,
                  const char *filename);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
int gestlang_load(gestlang_d *glang,
                  gest_d *gest,
                  const char *filename)
{
    char *buf;
    FILE *fp;
    int rc;

    fp = fopen(filename, "r");

    if (fp == NULL) {
        fprintf(stderr, "Could not open file %s\n", filename);
        return 1;
    }

    buf = calloc(1, 128);

    rc = 0;

    while (!feof(fp)) {
        int sz;
        sz = fread(buf, 1, 128, fp);
        rc = gestlang_parse_buffer(glang, gest, buf, sz);
        if (rc) break;
    }

    free(buf);
    fclose(fp);
    return rc;
}
#+END_SRC
* Dictionary
** structs
An entry is a =gestlang_entry=.

#+NAME: typedefs
#+BEGIN_SRC c
typedef struct gestlang_entry gestlang_entry;
#+END_SRC

#+NAME: structs
#+BEGIN_SRC c
struct gestlang_entry {
    char word[16];
    int sz;
    int (*fun)(gest_d *,int,char **,void*);
    int nargs;
    void *ud;
    void (*del)(void *);
    gestlang_entry *nxt;
};
#+END_SRC

16 of these makes up the hashmap.

#+NAME: gest_dict
#+BEGIN_SRC c
gestlang_entry *ent[16];
#+END_SRC
** init
#+NAME: init
#+BEGIN_SRC c
{
    int i;

    for (i = 0; i < 16; i++) glang->ent[i] = NULL;
}
#+END_SRC
** hash
#+NAME: static_funcdefs
#+BEGIN_SRC c
static int hash(const char *str, int sz);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
static int hash(const char *str, int sz)
{
    unsigned long h;
    int i;

    h = 5381;
    i = 0;

    for(i = 0; i < sz; i++) {
        h = ((h << 5) + h) ^ str[i];
        h %= 0x7FFFFFFF;
    }

    return h % 16;
}
#+END_SRC
** add
#+NAME: funcdefs
#+BEGIN_SRC c
void gestlang_add(gestlang_d *glang,
                  const char *key,
                  int sz,
                  int nargs,
                  int (*fun)(gest_d *,int,char **,void*),
                  void *ud,
                  void (*del)(void *));
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
void gestlang_add(gestlang_d *glang,
                  const char *key,
                  int sz,
                  int nargs,
                  int (*fun)(gest_d *,int,char **,void *),
                  void *ud,
                  void (*del)(void *))
{
    int pos;
    gestlang_entry *ent;
    int n;

    if (sz >= 16) return;

    ent = calloc(1, sizeof(gestlang_entry));

    for (n = 0; n < sz; n++) {
        ent->word[n] = key[n];
    }

    ent->word[sz] = '\0';
    ent->sz = sz;

    ent->fun = fun;
    ent->del = del;
    ent->nargs = nargs;
    ent->ud = ud;
    ent->nxt = NULL;

    pos = hash(key, sz);

    if (glang->ent[pos] == NULL) {
        glang->ent[pos] = ent;
    } else {
        ent->nxt = glang->ent[pos];
        glang->ent[pos] = ent;
    }
}
#+END_SRC
** cleanup
#+NAME: cleanup
#+BEGIN_SRC c
{
    int i;

    for (i = 0; i < 16; i++) {
        gestlang_entry *ent, *nxt;;

        ent = glang->ent[i];

        while (ent != NULL) {
            nxt = ent->nxt;

            if (ent->del != NULL) {
                ent->del(ent->ud);
            }

            free(ent);
            ent = nxt;
        }
    }
}
#+END_SRC
** find
#+NAME: funcdefs
#+BEGIN_SRC c
int gestlang_find(gestlang_d *glang,
                  const char *key,
                  int sz,
                  gestlang_entry **pent);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
int gestlang_find(gestlang_d *glang,
                  const char *key,
                  int sz,
                  gestlang_entry **pent)
{
    int pos;
    gestlang_entry *ent;

    pos = hash(key, sz);

    ent = glang->ent[pos];

    while(ent != NULL) {
        if (ent->sz == sz && !strcmp(key, ent->word)) {
            *pent = ent;
            return 0;
        }
        ent = ent->nxt;
    }

    return 1;
}
#+END_SRC
* Default Words
** loader
#+NAME: funcdefs
#+BEGIN_SRC c
void gestlang_loader(gestlang_d *g);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
<<words>>
void gestlang_loader(gestlang_d *glang)
{
    <<loader>>
}
#+END_SRC
** beg (begin)
Usage: beg nbeats div

Begins a phrase.

#+NAME: words
#+BEGIN_SRC c
static int f_beg(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_begin(g, atoi(argv[0]), atoi(argv[1]));
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "beg", 3, 2, f_beg, NULL, NULL);
#+END_SRC
** t (target)
Usage: t val

Appends a target.

#+NAME: words
#+BEGIN_SRC c
static int f_tar(gest_d *g, int argc, char *argv[], void *ud)
{
    return gest_addtarget(g, strtod(argv[0], 0));
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "t", 1, 1, f_tar, NULL, NULL);
#+END_SRC
** stp (step)
Usage: stp

Sets the current target to have step behavior.

#+NAME: words
#+BEGIN_SRC c
static int f_stp(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_behavior_step(g);
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "stp", 3, 0, f_stp, NULL, NULL);
#+END_SRC
** end (end)
Usage: end

Ends the current phrase.

#+NAME: words
#+BEGIN_SRC c
static int f_end(gest_d *g, int argc, char *argv[], void *ud)
{
    return gest_end(g);
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "end", 3, 0, f_end, NULL, NULL);
#+END_SRC
** loop (loopit)
Usage: loop

Loops the gesture.

#+NAME: words
#+BEGIN_SRC c
static int f_loop(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_loopit(g);
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "loop", 4, 0, f_loop, NULL, NULL);
#+END_SRC
** fin (finish)
Usage: fin

Finishes up the gesture.

#+NAME: words
#+BEGIN_SRC c
static int f_fin(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_finish(g);
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "fin", 3, 0, f_fin, NULL, NULL);
#+END_SRC
** mr (monoramp)
Usage: mr nbeats

Creates a monoramp.

#+NAME: words
#+BEGIN_SRC c
static int f_mr(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_monoramp(g, atoi(argv[0]));
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "mr", 2, 1, f_mr, NULL, NULL);
#+END_SRC
** pr (polyramp)
Usage: pr nbeats

Creates a polyramp.

#+NAME: words
#+BEGIN_SRC c
static int f_pr(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_polyramp(g, atoi(argv[0]));
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "pr", 2, 1, f_pr, NULL, NULL);
#+END_SRC
** lin (linear)
Usage: lin

Sets the currently selected target to have linear
behavior.

#+NAME: words
#+BEGIN_SRC c
static int f_lin(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_behavior_linear(g);
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "lin", 3, 0, f_lin, NULL, NULL);
#+END_SRC
** sg (smallgliss)
Usage: sg

Sets the currently selected target to have small glissando
behavior.

#+NAME: words
#+BEGIN_SRC c
static int f_sg(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_behavior_smallgliss(g);
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "sg", 2, 0, f_sg, NULL, NULL);
#+END_SRC
** mg (mediumgliss)
Usage: mg

Sets the currently selected target to have medium glissando
behavior.

#+NAME: words
#+BEGIN_SRC c
static int f_mg(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_behavior_mediumgliss(g);
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "mg", 2, 0, f_mg, NULL, NULL);
#+END_SRC
** gl (gliss)
Usage: mg

Sets the currently selected target to have glissando
behavior.

#+NAME: words
#+BEGIN_SRC c
static int f_gl(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_behavior_gliss(g);
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "gl", 2, 0, f_gl, NULL, NULL);
#+END_SRC
** in (inertia)
** ma (mass)
** exp (exponential)
** bez (bezier)
** mt (metatarget)
** mb (metabehavior)
** rndt (randtarget)
** rndb (randbehavior)
** rndn (randnode)
** rndp (randphrase)
** rpt (repeat)
** mrk (mark)
** ret (return)
** skq (skewquad)
** skx (skewexp)
** skf (skewshuf)
** shr (shrink)
** grw (grow)
** smo (smoothstep)
** rmp (ramp)
Usage: rmp

Sets the currently selected target to output the underlying
ramp, rather than using it to interpolate between targets.

#+NAME: words
#+BEGIN_SRC c
static int f_rmp(gest_d *g, int argc, char *argv[], void *ud)
{
    gest_ramp(g);
    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "rmp", 3, 0, f_rmp, NULL, NULL);
#+END_SRC
** irmp (invramp)
** br (biramp)
** gt (gate)
* Comments
A common practice for comments is to use '#', and
from there until the end of the line the.

#+NAME: comments
#+BEGIN_SRC c
int comment;
#+END_SRC

#+NAME: init
#+BEGIN_SRC c
glang->comment = 0;
#+END_SRC

The '#' can be implemented as a word! when called, it turns
on the comment flag.

#+NAME: static_funcdefs
#+BEGIN_SRC c
static int f_comment(gest_d *g, int argc, char *argv[], void *ud);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
static int f_comment(gest_d *g, int argc, char *argv[], void *ud)
{
    gestlang_d *glang;

    glang = ud;

    glang->comment = 1;

    return 0;
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "#", 1, 0, f_comment, glang, NULL);
#+END_SRC

The comment flag, once enabled, will ignore characters until
the next newline.

#+NAME: handle_comments
#+BEGIN_SRC c
if (glang->comment) {
    if (buf[i] == '\n') {
        glang->comment = 0;
        glang->wsz = 0;
    }
    continue;
}
#+END_SRC
* Note Target (nt)
When sequencing notes, it's helpful to have an
abstraction that converts a note name string (such as C-4)
into a MIDI note number (60).

#+NAME: static_funcdefs
#+BEGIN_SRC c
static int pch2nn(const char *pch);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
static int pch2nn(const char *pch)
{
    int nn;

    nn = 0;

    if (pch[0] == 0) return 0;

    switch (pch[0]) {
        case 'C':
            nn = 0;
            break;
        case 'D':
            nn = 2;
            break;
        case 'E':
            nn = 4;
            break;
        case 'F':
            nn = 5;
            break;
        case 'G':
            nn = 7;
            break;
        case 'A':
            nn = 9;
            break;
        case 'B':
            nn = 11;
            break;
        default:
            break;
    }

    if (pch[1] == 0) return nn;


    if (pch[1] == '#') nn++;
    else if (pch[1] == 'b') nn--;

    if (pch[2] == 0) return nn;

    nn += 12 * (1 + (pch[2] - '0'));

    return nn;
}
#+END_SRC

#+NAME: static_funcdefs
#+BEGIN_SRC c
static int f_nt(gest_d *g, int argc, char *argv[], void *ud);
#+END_SRC

#+NAME: funcs
#+BEGIN_SRC c
static int f_nt(gest_d *g, int argc, char *argv[], void *ud)
{
    return gest_addtarget(g, pch2nn(argv[0]));
}
#+END_SRC

#+NAME: loader
#+BEGIN_SRC c
gestlang_add(glang, "nt", 2, 1, f_nt, NULL, NULL);
#+END_SRC
